name: Infra Provisioning through Terraform

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy (e.g., dev, staging, prod)"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - prod
          - destroy

  push:
    branches:
      - main

  pull_request:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write   
  id-token: write  

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Terraform (Ensuring latest version)
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest  # Ensures latest Terraform version

      # Step 3: Check Terraform Version
      - name: Check Terraform Version
        run: terraform --version

      # Step 4: Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          role-session-name: GitHubActions
          aws-region: us-east-1

      # Step 5: Install TFLint (Terraform Linter)
      - name: Install TFLint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          tflint --version  # Verify the installed version

      # Step 6: Run TFLint
      - name: Run TFLint
        run: |
          cd infra/
          tflint --init
          tflint

      # Step 7: Initialize Terraform (Fixed)
      - name: Terraform Init
        run: |
          cd infra/
          terraform init -backend-config=../environment/.backend

      # Step 8: Validate Terraform Configuration
      - name: Terraform Validate
        run: |
          cd infra/
          terraform validate

      # Step 9: Set Environment Variable (Fix for Push & PR)
      - name: Set Deployment Environment
        run: echo "DEPLOY_ENV=${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_ENV

      # Step 10: Terraform Plan
      - name: Terraform Plan
        run: |
          cd infra/
          terraform plan -var-file=../environment/${{ env.DEPLOY_ENV }}.tfvars

      # Step 11: Terraform Apply (Only on Push)
      - name: Terraform Apply
        if: github.event_name == 'push'
        run: |
          cd infra/
          terraform apply -auto-approve -var-file=../environment/${{ env.DEPLOY_ENV }}.tfvars

      # Step 12: Terraform Destroy (Only if manually triggered with "destroy")
      - name: Terraform Destroy
        if: github.event_name == 'workflow_dispatch' && env.DEPLOY_ENV == 'destroy'
        run: |
          cd infra/
          terraform destroy -auto-approve -var-file=../environment/dev.tfvars
